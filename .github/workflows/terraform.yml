name: "CI/CD Pipeline for EKS Deployment"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform:
    name: "Terraform Plan and Apply"
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: "Checkout code"
        uses: actions/checkout@v3

      # Step 2: Setup Terraform
      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      # Step 3: Configure AWS Credentials
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-south-1"

      # Step 4: Terraform Init
      - name: "Terraform Init"
        run: terraform init -input=false

      # Step 5: Terraform Plan
      - name: "Terraform Plan"
        id: plan
        run: terraform plan -out=plan.tfplan
        continue-on-error: true  # Allow workflow to continue even if plan fails

      # Step 6: Conditional Apply if there are no major errors
      - name: "Check Terraform Plan"
        if: ${{ success() && steps.plan.outcome == 'success' }}
        run: terraform apply -auto-approve plan.tfplan

      # Step 7: Handle Duplicate or Conflicting Resources (if any)
      - name: "Handle Existing Resources"
        if: ${{ failure() }}
        run: |
          # Import or remove duplicates from Terraform state
          echo "Handling existing resources if any conflicts are found..."
          terraform import aws_key_pair.bastion_key bastion-key || echo "Key pair already imported."
          terraform state rm aws_kms_alias.this || echo "KMS alias removal not required."
          terraform plan -out=plan.tfplan || exit 1

      # Step 8: Terraform Apply with Conflicts Resolved
      - name: "Apply Terraform Changes"
        if: ${{ failure() }}
        run: terraform apply -auto-approve plan.tfplan

      # Step 9: Terraform Cleanup & State Check
      - name: "Terraform Cleanup"
        run: terraform plan || echo "Final cleanup of the state if needed"
